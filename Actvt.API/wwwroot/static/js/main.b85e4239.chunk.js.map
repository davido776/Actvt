{"version":3,"sources":["app/models/pagination.ts","app/models/activity.ts","app/api/agent.ts","app/models/profile.ts","app/stores/activityStores.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/users/LoginForm.tsx","features/home/Homepage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyDateInput.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailHeader.tsx","features/activities/details/ActivityDetailInfo.tsx","features/activities/details/ActivityDetailSidebar.tsx","features/activities/details/ActivityDetailChat.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","app/layout/PrivateRoutes.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/common/modals/ModalContainer.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","Activity","init","Object","assign","ActivityFormValues","activity","id","undefined","title","description","category","date","city","venue","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","errors","modalStateErrors","key","push","flat","toast","history","Promise","reject","responseBody","requests","url","get","then","res","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","console","log","setLoadingInitial","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","name","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Reveal","animated","Content","visible","style","width","Button","fluid","color","hidden","basic","onClick","e","preventDefault","handleFollow","Card","as","Link","to","Image","src","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","Item","bordered","size","circular","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","Menu","vertical","marginTop","icon","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","inverted","fixed","Container","NavLink","exact","header","alt","marginRight","positive","position","avatar","spaced","Dropdown","pointing","text","MyTextInput","props","useField","field","meta","Form","Field","touched","label","ValidationErrors","Message","err","i","initialValues","email","password","onSubmit","setErrors","validationSchema","Yup","required","handleSubmit","isSubmitting","isValid","dirty","className","autoComplete","placeholder","type","render","isLoggedIn","LoadingComponent","Dimmer","MyDateInput","helpers","selected","setValue","MySelectInput","Select","clearable","options","event","MyTextArea","categoryOptions","useHistory","useParams","nullable","coontent","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","relaxed","divided","Extra","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","NotFound","Inline","primary","PrivateRoute","Component","component","rest","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","widths","currentTarget","handleSetMainPhoto","handleDeletePhoto","editProfileMode","setEditProfileMode","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","Divider","Modal","onClose","location","useLocation","finally","hideProgressBar","path","Homepage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.b85e4239.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","\r\nimport { Profile } from './profile';\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost:boolean;\r\n    host?:Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity{\r\n    constructor(init?:ActivityFormValues){\r\n        Object.assign(this,init)\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?:string = undefined;\r\n    title:string = '';\r\n    description : string = '';\r\n    category:string = '';\r\n    date : Date |null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n        if(activity){\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.description = activity.description;\r\n            this.category = activity.category;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n\r\n}","import { PaginatedResult } from './../models/pagination';\r\nimport { ActivityFormValues } from './../models/activity';\r\nimport { User, UserFormValues } from './../models/user';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity } from '../models/activity';\r\nimport { store } from '../stores/store';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\n\r\nconst sleep = (delay:number) =>{\r\n    return new Promise((resolve) =>{\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config =>{\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n        if(process.env.NODE_ENV === 'development'){\r\n            await sleep(1000);\r\n        }\r\n        const pagination = response.headers['pagination'];\r\n        if(pagination){\r\n            response.data = new PaginatedResult(response.data,JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n},(error:AxiosError)=>{\r\n    const {data, status} = error.response!;\r\n    switch(status){\r\n        case 400:\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }else{\r\n                toast.error(data);\r\n            }\r\n            \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised')\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            //toast.error('not found');\r\n            break;\r\n        case 500:\r\n            toast.error('server error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url:string) => axios.get<T>(url).then(res=>responseBody(res)),\r\n    post: <T> (url:string, body:{}) => axios.post<T>(url,body).then(responseBody),\r\n    put: <T> (url:string, body:{}) => axios.put<T>(url,body).then(responseBody),\r\n    del: <T>(url:string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\n\r\nconst Activities ={\r\n    list : (params:URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities',{params}).then(responseBody),\r\n    details: (id:string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity:ActivityFormValues) => requests.post<void>('/activities',activity),\r\n    update: (activity:ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`,activity),\r\n    delete: (id:string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id:string) => requests.post<void>(`/activities/${id}/attend`,{})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user:UserFormValues) => requests.post<User>('/account/login',user),\r\n    register: (user:UserFormValues) =>requests.post<User>('/account/register',user)\r\n}\r\n\r\nconst Profiles ={\r\n    get: (username:string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto:(file:Blob) =>{\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos',{\r\n            headers:{'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto : (id:string) => requests.post(`/photos/${id}/setMain`,{}),\r\n    deletePhoto : (id:string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`,profile),\r\n    updateFollowing:(username:string) => requests.post(`/follow/${username}`,{}),\r\n    listFollowings:(username:string,predicate:string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\n\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\n\r\nexport default agent;","import { User } from \"./user\";\r\n\r\nexport interface Profile{\r\n    username: string;\r\n    displayName: string;\r\n    image? : string;\r\n    bio? : string;\r\n    followersCount:number;\r\n    followingCount:number;\r\n    following:boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user:User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\n\r\nexport interface Photo{\r\n    id:string;\r\n    url:string;\r\n    isMain:boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { PagingParams } from './../models/pagination';\r\nimport { ActivityFormValues } from './../models/activity';\r\nimport { Activity } from '../models/activity';\r\nimport { makeAutoObservable, runInAction, reaction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport {format} from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n   //activities : Activity[] = [];\r\n   activityRegistry = new Map<string, Activity>();\r\n   selectedActivity : Activity | undefined = undefined;\r\n   editMode = false\r\n   loading = false\r\n   loadingInitial = false;\r\n   pagination: Pagination | null = null;\r\n   pagingParams= new PagingParams();\r\n   predicate = new Map().set('all',true);\r\n\r\n   constructor(){\r\n       makeAutoObservable(this)\r\n       reaction(\r\n           () => this.predicate.keys(),\r\n           () =>{\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n           }\r\n       )\r\n   }\r\n   \r\n   setPagingParams = (pagingParams:PagingParams) =>{\r\n        this.pagingParams = pagingParams;\r\n   }\r\n\r\n   setPredicate = (predicate: string,value:string|Date)=>{\r\n       const resetPredicate = () =>{\r\n           this.predicate.forEach((value,key)=>{\r\n               if(key !== 'startDate') this.predicate.delete(key);\r\n           })\r\n       }\r\n       switch(predicate){\r\n           case 'all':\r\n               resetPredicate();\r\n               this.predicate.set('all',true)\r\n               break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing',true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost',true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate',value);\r\n                break;\r\n\r\n       }\r\n   }\r\n\r\n   get axiosParams(){\r\n       const params = new URLSearchParams();\r\n       params.append('pageNumber',this.pagingParams.pageNumber.toString());\r\n       params.append('pageSize',this.pagingParams.pageSize.toString());\r\n       this.predicate.forEach((value,key)=>{\r\n           if(key === 'startDate'){\r\n               params.append(key,(value as Date).toISOString());\r\n           }else{\r\n               params.append(key,value);\r\n           }\r\n       })\r\n       return params;\r\n   }\r\n\r\n\r\n   get activitiesByDate(){\r\n       return Array.from(this.activityRegistry.values()).sort((a,b)=>a.date!.getTime() - b.date!.getTime())\r\n   }\r\n   \r\n   get groupedActivities(){\r\n       return Object.entries(\r\n           this.activitiesByDate.reduce((activities,activity) =>{\r\n               const date = format(activity.date!, 'dd MM yyy');\r\n               activities[date] = activities[date] ? [...activities[date],activity] : [activity];\r\n               return activities;\r\n           },{} as {[key:string]: Activity[]})\r\n       )\r\n   }\r\n\r\n\r\n   loadActivities = async () =>{\r\n       this.loadingInitial = true;\r\n       try{\r\n          const result = await agent.Activities.list(this.axiosParams);\r\n         \r\n            result.data.forEach(activity =>{\r\n               this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            console.log(result.pagination);\r\n            this.setLoadingInitial(false);  \r\n       }catch(err){\r\n           console.log(err);\r\n           this.setLoadingInitial(false);\r\n       }\r\n    }\r\n\r\n    setPagination = (pagination:Pagination)=>{\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id:string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }else{\r\n            this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(()=>{\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }catch(err){\r\n                console.log(err);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity:Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user){\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x=> x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id,activity);\r\n    }\r\n\r\n    private getActivity = (id:string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n     setLoadingInitial = (state:boolean) =>{\r\n         this.loadingInitial= state;\r\n     }\r\n\r\n     createActivity = async (activity:ActivityFormValues) =>{\r\n          const user = store.userStore.user;\r\n          const attendee = new Profile(user!); \r\n          try{\r\n              await agent.Activities.create(activity);\r\n              const newActivity = new Activity(activity);\r\n              newActivity.hostUsername = user!.username\r\n              newActivity.attendees = [attendee]\r\n              this.setActivity(newActivity);\r\n              runInAction(()=>{\r\n                  this.selectedActivity = newActivity;\r\n              })\r\n          }catch(err){\r\n              console.log(err);\r\n             \r\n          }\r\n     }\r\n\r\n     updateActivity = async (activity:ActivityFormValues) =>{\r\n            this.loading =true;\r\n            try{\r\n                await agent.Activities.update(activity);\r\n                runInAction(()=>{\r\n                    if(activity.id){\r\n                        let updatedActivity = {...this.getActivity(activity.id),...activity}\r\n                        this.activityRegistry.set(activity.id,updatedActivity as Activity);\r\n                        this.selectedActivity = updatedActivity as Activity;\r\n                    }\r\n                    //this.activities = [...this.activities.filter(x => x.id != activity.id), activity]                 \r\n                })\r\n            }catch(err){\r\n                console.log(err);\r\n              \r\n            }\r\n     }\r\n\r\n     deleteActivity = async (id:string) =>{\r\n            this.loading = true;\r\n            try{\r\n                await agent.Activities.delete(id);\r\n                runInAction(()=>{\r\n                    this.activityRegistry.delete(id);\r\n                    //this.activities = [...this.activities.filter(x => x.id != id)];\r\n                    this.loading =false;\r\n                })\r\n            }catch(err){\r\n                console.log(err);\r\n                runInAction(()=>{\r\n                    this.loading = false;\r\n                })\r\n            }\r\n     }\r\n\r\n     updateAttendance = async () =>{\r\n         const user = store.userStore.user;\r\n         this.loading = true;\r\n         try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() =>{\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username)\r\n                    this.selectedActivity.isGoing = false;\r\n                }else{\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n\r\n         }catch(error){\r\n            console.log(error);\r\n         }finally{\r\n             runInAction(()=> this.loading = false);\r\n         }\r\n\r\n     }\r\n\r\n     cancelActivityToggle = async  () =>{\r\n            this.loading = true;\r\n            try{\r\n                await agent.Activities.attend(this.selectedActivity!.id);\r\n                runInAction(()=>{\r\n                    this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                    this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n                })\r\n            }catch(error){\r\n                console.log(error);\r\n            }finally{\r\n                runInAction(()=> this.loading = false);\r\n            }\r\n     }\r\n\r\n     clearSelectedActivity = () =>{\r\n         this.selectedActivity = undefined;\r\n     }\r\n\r\n     updateAttendeeFollowing = (username:string) =>{\r\n        this.activityRegistry.forEach(activity =>{\r\n            activity.attendees.forEach(attendee =>{\r\n                if(attendee.username === username){\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n     }\r\n\r\n\r\n   \r\n\r\n}","import { Image } from 'semantic-ui-react';\r\nimport { history } from './../../index';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { User, UserFormValues } from './../models/user';\r\nimport agent from '../api/agent';\r\nimport { store } from './store';\r\n\r\n\r\n\r\n\r\nexport default class UserStore{\r\n    user:User | null = null\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Account.login(creds)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () =>{\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/')\r\n    }\r\n\r\n    getUser = async () =>{\r\n        try{\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds:UserFormValues) =>{\r\n        try{\r\n            const user = await agent.Account.register(creds)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) =>{\r\n        if(this.user) this.user.image = image\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { store, useStore } from './store';\r\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport { Profile, Photo, UserActivity } from './../models/profile';\r\nimport agent from '../api/agent';\r\n\r\n\r\nexport default class ProfileStore{\r\n    profile:Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings : Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if(activeTab === 3 || activeTab ==4){\r\n                    const predicate = activeTab === 3 ? 'followers':'following';\r\n                    this.loadFollowings(predicate);\r\n                }else{\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab:any) =>{\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string)=>{\r\n        this.loadingProfile = true;\r\n        try{\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() =>{\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file:Blob)=>{\r\n        this.uploading = true;\r\n        try{\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(()=>{\r\n                if(this.profile ){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo:Photo) =>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        }catch(error){\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo:Photo) =>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            console.log(\"updating\");\r\n                await agent.Profiles.updateProfile(profile);\r\n                runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                  store.userStore.user?.displayName) \r\n                {\r\n                  store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n                })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username:string,following:boolean) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username){\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username){\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username){\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=>this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate:string) =>{\r\n        this.loading = true;\r\n        try{\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(()=>{\r\n\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=>this.loadingFollowings = false);\r\n        }\r\n\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n       \r\n}\r\n","import ActivityStore from \"./activityStores\";\r\nimport UserStore from \"./userStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport {createContext, useContext} from 'react'; \r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    userStore: UserStore\r\n    commonStore: CommonStore\r\n    modalStore: ModalStore\r\n    profileStore:ProfileStore\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store:Store={\r\n     activityStore: new ActivityStore(),\r\n     userStore: new UserStore(),\r\n     commonStore: new CommonStore(),\r\n     modalStore: new ModalStore(),\r\n     profileStore : new ProfileStore(),\r\n     commentStore : new CommentStore()\r\n}\r\n\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const useStore = ()=>{\r\n    return useContext(StoreContext);\r\n}\r\n\r\n\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\n\r\n\r\nexport default class CommonStore{\r\n    \r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt',token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setToken = (token: string | null) =>{\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () =>{\r\n        this.appLoaded = true;\r\n    }\r\n\r\n    \r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\n// interface Modal{\r\n//   open:boolean;\r\n//   body:JSX.Element | null;\r\n// }\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal : Modal = {\r\n        open:false,\r\n        body:null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal  = (content: JSX.Element) =>{\r\n        this.modal.open = true;\r\n        this.modal.body = content\r\n    }\r\n\r\n    closeModal = () =>{\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { store } from './store';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { ChatComment } from './../models/comment';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\n\r\n\r\nexport default class CommentStore{\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                                    .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId='+ activityId,{\r\n                                        accessTokenFactory : () => store.userStore.user?.token!\r\n                                    })\r\n                                    .withAutomaticReconnect()\r\n                                    .configureLogging(LogLevel.Information)\r\n                                    .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the connection\"));\r\n\r\n            this.hubConnection.on('LoadComments', (comments:ChatComment[]) =>{\r\n                runInAction(() =>{\r\n                    comments.forEach(comment =>{\r\n                        comment.createdAt = new Date(comment.createdAt+'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment',(comment:ChatComment) =>{\r\n                runInAction(()=> {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    stopHubConnection = () =>{\r\n        this.hubConnection?.stop().catch(error=>console.log(error));\r\n    }\r\n\r\n    clearComments = () =>{\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values:any) =>{\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try{\r\n            await this.hubConnection?.invoke('SendComment',values);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n}","  import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Card,Icon,Image} from 'semantic-ui-react';\r\nimport { Link} from 'react-router-dom';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}:Props){\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n            }\r\n    }\r\n\r\n     return (\r\n         <Card as={Link} to={`/profiles/${profile.username}`}>\r\n             <Image src={profile.image || '/assets/user.png'} />\r\n             <Card.Content>\r\n                 <Card.Header>\r\n                     {profile.displayName}\r\n                 </Card.Header>\r\n                 <Card.Description>\r\n                    {truncate(profile.bio)}\r\n                 </Card.Description>\r\n             </Card.Content>\r\n             <Card.Content extra>\r\n                 <Icon name='user'/>\r\n                 {profile.followersCount} followers\r\n             </Card.Content>\r\n             <FollowButton profile={profile}/>\r\n         </Card>\r\n     )  \r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List,Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\n\r\ninterface Props{\r\n    attendees : Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees} : Props){\r\n    const styles ={\r\n      borderColor:'orange',\r\n      borderWidth:3\r\n\r\n    }\r\n     return (\r\n         <List horizontal>\r\n             {attendees.map(attendee =>(\r\n                <Popup\r\n                  hoverable\r\n                  key={attendee.username}\r\n                  trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                        <Image \r\n                            bordered \r\n                            size='mini' \r\n                            circular \r\n                            src={attendee.image || '/assets/user.png'}\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n                    </List.Item>\r\n                  }\r\n                >\r\n                     <Popup.Content>\r\n                        <ProfileCard profile={attendee}/>\r\n                     </Popup.Content>\r\n\r\n                </Popup>\r\n                \r\n             ))}\r\n             \r\n         </List>\r\n     )\r\n})","import { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { Link } from 'react-router-dom';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\n\r\ninterface Props{\r\n    activity:Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}:Props){\r\n    \r\n\r\n    return(\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&(\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign:'center'}}/>\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom:3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost &&(\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                               {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nexport default observer(function ActivityList(){\r\n    \r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    \r\n\r\n    return (\r\n         <>\r\n            {groupedActivities.map(([group,activities])=>(\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    <Segment>\r\n                            {activities.map(activity =>(\r\n                                <ActivityListItem key={activity.id} activity={activity}/>\r\n                            ))}\r\n                    </Segment>\r\n                </Fragment>\r\n            ))}\r\n         </>\r\n        \r\n    )\r\n}\r\n\r\n)","import React from 'react';\r\nimport {Header,Menu} from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters(){\r\n    const {activityStore:{predicate,setPredicate}} = useStore();\r\n    return(\r\n        <>\r\n            <Menu vertical size='large' style={{width:'100%',marginTop:25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                   content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={()=>setPredicate('all','true')}\r\n                />\r\n                <Menu.Item content=\"I'm going\"\r\n                  active={predicate.has('isGoing')}\r\n                  onClick={()=>setPredicate('isGoing','true')}\r\n                />\r\n                <Menu.Item content=\"I'm hosting\"\r\n                  active={predicate.has('isHost')}\r\n                  onClick={()=>setPredicate('isHost','true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n               onChange={(date:any) => setPredicate('startDate',date as Date)}\r\n               value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React,{useEffect, useState} from 'react';\r\nimport {Button, Grid, Loader} from 'semantic-ui-react';\r\nimport ActivityList  from './ActivityList';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nexport default observer(function ActivityDashboard(){\r\n    const {activityStore} = useStore();\r\n    const {loadActivities,activityRegistry,setPagingParams,pagination} = activityStore;\r\n    const [loadingNext,setLoadingNext] = useState(false);\r\n    \r\n    \r\n    const handleGetNext = () =>{\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage+1))\r\n        loadActivities().then(()=>setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() =>{\r\n       if(activityRegistry.size <= 0) loadActivities();\r\n    },[activityRegistry.size,loadActivities])\r\n    \r\n    //if(activityStore.loadingInitial && !loadingNext) return <LoadingComponent content={'Loading activities'}/>\r\n  \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {activityStore.loadingInitial && !loadingNext ?(\r\n                    <>\r\n                        <ActivityListItemPlaceholder/>\r\n                        <ActivityListItemPlaceholder/>\r\n                    </>\r\n                ):(\r\n                    <InfiniteScroll\r\n                    pageStart={0}\r\n                    loadMore={handleGetNext}\r\n                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                    initialLoad={false}\r\n\r\n                    >\r\n                       <ActivityList/>\r\n\r\n                    </InfiniteScroll>  \r\n                )}\r\n                   \r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilters/>\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n)","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport {Menu, Container,Button,Image, Dropdown} from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer(function NavBar(){\r\n    const {userStore:{user,logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                        <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight:'10px',}}/>\r\n                        Actvts\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item>\r\n                        <Button as={NavLink} to='/createActivity'  positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || 'assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import {Form, Label} from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name:string;\r\n    type?:string;\r\n    label?:string;\r\n}\r\n\r\n\r\nexport default function MyTextInput(props:Props){\r\n    const [field,meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import React from 'react';\r\nimport { Formik,Form, ErrorMessage } from 'formik';\r\nimport MyTextInput  from '../../app/common/form/MyTextInput';\r\nimport { Button, Header} from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport  ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer (function RegisterForm(){\r\n   const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n           initialValues={{displayName:'',username:'', email:'',password:'',error:null}}\r\n           onSubmit={(values, {setErrors}) => userStore.register(values).catch(error=>setErrors({error}))}\r\n           validationSchema={Yup.object({\r\n               displayName : Yup.string().required(),\r\n               username : Yup.string().required(),\r\n               email : Yup.string().required().email(),\r\n               password : Yup.string().required(),\r\n           })}\r\n        >\r\n            {({handleSubmit, isSubmitting,errors,isValid,dirty}) =>(\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\r\n                    <MyTextInput name='username' placeholder='Username'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage\r\n                        name='error' render ={()=> <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Formik,Form, ErrorMessage } from 'formik';\r\nimport MyTextInput  from '../../app/common/form/MyTextInput';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer (function LoginForm(){\r\n   const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n           initialValues={{email:'',password:'',error:null}}\r\n           onSubmit={(values, {setErrors}) => userStore.login(values).catch(error=>setErrors({error:'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting,errors}) =>(\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage\r\n                        name='error' render ={()=> <Label style={{marginBottom:10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Container, Header, Segment,Image, Button} from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport RegisterForm from '../users/RegisterForm';\r\nimport LoginForm from '../users/LoginForm';\r\n\r\nexport default observer(function Homepage() {\r\n    const {userStore,modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom:12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ?(\r\n                    <>\r\n                       <Header as='h2' inverted content='Welcome to Reactivities'/>\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities\r\n                        </Button> \r\n                    </>\r\n                ):(\r\n                    <>\r\n                        <Button onClick={()=>modalStore.openModal(<LoginForm/>)}  size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={()=>modalStore.openModal(<RegisterForm/>)}  size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </> \r\n                )}\r\n            </Container>\r\n            \r\n        </Segment>\r\n    );\r\n})\r\n\r\n","import React from 'react';\r\nimport {Dimmer, Loader} from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    inverted?: boolean\r\n    content?: string\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true,content = 'Loading...'}:Props){\r\n      return (\r\n            <Dimmer active={true} inverted={inverted}>\r\n                <Loader content={content}/>\r\n            </Dimmer>\r\n      )\r\n\r\n      \r\n}","import {Form, Label} from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\nimport DatePicker,{ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n    const [field,meta,helpers] = useField(props.name!);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n               {...field}\r\n               {...props}\r\n               selected={(field.value && new Date(field.value)) || null}\r\n               onChange={value => helpers.setValue(value)}\r\n            \r\n            />\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import {Form, Label, Select} from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name:string;\r\n    options:any;\r\n    label?:string;\r\n}\r\n\r\n\r\nexport default function MySelectInput(props:Props){\r\n    const [field,meta,helpers] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n               clearable\r\n               options={props.options}\r\n               value={field.value || null}\r\n               onChange = {(event,data)=>helpers.setValue(data.value)}\r\n               placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import {Form, Label} from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name:string;\r\n    rows:number;\r\n    label?:string;\r\n}\r\n\r\n\r\nexport default function MyTextArea(props:Props){\r\n    const [field,meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text:'Drinks',value:'drinks'},\r\n    {text:'Culture',value:'culture'},\r\n    {text:'Film',value:'film'},\r\n    {text:'Food',value:'food'},\r\n    {text:'Music',value:'music'},\r\n    {text:'Travel',value:'travel'}\r\n]","import { observer } from 'mobx-react-lite';\r\nimport {useState,useEffect } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header,Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik,Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MyTextInput  from '../../../app/common/form/MyTextInput';\r\nimport {categoryOptions} from '../../../app/common/options/categoryOptions';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\n\r\n\r\nexport default observer(function ActivityForm(){\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity,updateActivity,loadActivity,loadingInitial} = activityStore;\r\n    const {id} = useParams<{id:string}>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n    \r\n    const validationSchema = Yup.object({\r\n        title : Yup.string().required('The activity title is required'),\r\n        description : Yup.string().required('The activity description is required'),\r\n        venue : Yup.string().required(),\r\n        category : Yup.string().required(),\r\n        date : Yup.string().required('date is required').nullable(),\r\n        city : Yup.string().required()\r\n    })\r\n\r\n    useEffect(()=>{\r\n       if(id) loadActivity(id).then(activity=>setActivity(new ActivityFormValues(activity)))\r\n    },[id,loadActivity]);\r\n\r\n\r\n     const handleFormSubmit = (activity:ActivityFormValues)=>{\r\n         if(!activity.id){\r\n             let newActivity = {\r\n                 ...activity,\r\n                 id: uuid()\r\n             }\r\n             createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`))\r\n         }else{\r\n            updateActivity(activity).then(()=>history.push(`/activities/${activity.id}`))\r\n         }\r\n         \r\n     }\r\n\r\n    //  const handleChange = (e:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) =>{\r\n    //      const {name, value} = e.target\r\n    //      setActivity({...activity, [name]:value})\r\n    //  }\r\n\r\n    if(loadingInitial) return <LoadingComponent content=\"Loading activity...\"/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header coontent='Activity Details' sub-color='teal'/>\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} onSubmit={values=>handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting,dirty}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <MyTextInput name='title' placeholder='title'/>\r\n                    <MyTextArea rows={3} placeholder='Description'  name='description' />\r\n                    <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                    <MyDateInput \r\n                        placeholderText='Date'\r\n                        showTimeSelect\r\n                        timeCaption='time'\r\n                        dateFormat='MMMM d, yyyy h:mm aa'\r\n                        name='date'\r\n                     />\r\n                    <Header content='Location Details' sub-color='teal'/>\r\n                    <MyTextInput placeholder='City'  name='city' />\r\n                    <MyTextInput placeholder='Venue'  name='venue' />\r\n                    <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated='right' \r\n                        positive type='submit'\r\n                        content='Submit'/>\r\n                    <Button as={Link} to='/activities'  floated='right' type='button' content='Cancel'/>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    )\r\n}\r\n\r\n)","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailHeader({activity}: Props) {\r\n    const {activityStore:{updateAttendance,loading, cancelActivityToggle}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&(\r\n                    <Label style={{position:'absolute', zIndex:1000,left:-14,top:20}} ribbon color='red' content='cancelled'/>\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.username}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ?(\r\n                    <>\r\n                        <Button \r\n                          color={activity.isCancelled ? 'green' :'red'}\r\n                          floated='left'\r\n                          basic\r\n                          content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                          onClick={cancelActivityToggle}\r\n                          loading={loading}\r\n                        />\r\n                        <Button \r\n                           disabled={activity.isCancelled}\r\n                           as={Link} \r\n                           to={`/manage/${activity.id}`} \r\n                           color='orange' \r\n                           floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ):activity.isGoing?(\r\n\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ):(\r\n                    <Button \r\n                        disabled={activity.isCancelled}\r\n                        loading={loading} \r\n                        onClick={updateAttendance} \r\n                        color='teal'>Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailSidebar ({activity:{attendees,host}}:Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person': 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee =>(\r\n\r\n                        <Item style={{ position: 'relative' }}>\r\n                            {attendee.username === host?.username &&(\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>\r\n\r\n                            )}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&(\r\n                                   <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n","import { Formik,Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Button, Loader} from 'semantic-ui-react'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\n\r\ninterface Props{\r\n    activityId : string;\r\n\r\n}\r\n\r\nexport default observer(function ActivityDetailChat({activityId}:Props) {\r\n\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(()=>{\r\n        if(activityId){\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () =>{\r\n            commentStore.clearComments();\r\n        }\r\n    },[commentStore,activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                     onSubmit={(values,{resetForm}) => commentStore.addComment(values).then(()=>resetForm())}\r\n                     initialValues={{body:''}}\r\n                     validationSchema={\r\n                         Yup.object({\r\n                             body: Yup.string().required()\r\n                         })\r\n                     }\r\n                    >\r\n                        {({handleSubmit,isSubmitting,isValid}) =>(\r\n\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props:FieldProps)=>(\r\n                                        <div style={{position:'relative'}}>\r\n                                            <Loader active={isSubmitting}/>\r\n                                            <textarea\r\n                                                 placeholder='Enter your comment(Enter to submit, SHIFT + enter for new line)'\r\n                                                 rows={2}\r\n                                                 {...props.field}\r\n                                                 onKeyPress={e => {\r\n                                                     if(e.key === 'Enter' && e.shiftKey){\r\n                                                         return;\r\n                                                     }\r\n                                                     if(e.key === 'Enter' && !e.shiftKey){\r\n                                                         e.preventDefault();\r\n                                                         isValid && handleSubmit();\r\n                                                     }\r\n                                                 }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment =>(\r\n\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace:'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                \r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                    \r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid} from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailHeader from './ActivityDetailHeader';\r\nimport ActivityDetailInfo from './ActivityDetailInfo';\r\nimport ActivityDetailSidebar from './ActivityDetailSidebar'; \r\nimport ActivityDetailChat from './ActivityDetailChat';\r\n\r\n\r\nexport default observer(function ActivtityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity :activity,loadActivity,loadingInitial,clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id:string}>();\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    },[id,loadActivity,clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent/>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailHeader activity={activity}/>\r\n                <ActivityDetailInfo activity={activity}/>\r\n                <ActivityDetailChat activityId={activity.id} />    \r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport {Button, Header,Icon,Segment} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function NotFound(){\r\n    return (\r\n       <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops - we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n       </Segment>\r\n    )\r\n}","import React from \"react\";\r\nimport { RouteComponentProps, RouteProps,Route, Redirect } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component:React.ComponentType<RouteComponentProps<any>> |React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component:Component,...rest}:Props){\r\n    const {userStore:{isLoggedIn}} = useStore();\r\n    return(\r\n        <Route\r\n           {...rest}\r\n           render={(props)=>isLoggedIn ? <Component {...props}/> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}:Props){\r\n    return(\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height:200,width:'100%'}}\r\n            initialAspectRatio= {1}\r\n            aspectRatio= {1}\r\n            preview= '.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background= {false}\r\n            onInitialized={cropper=> setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\n\r\ninterface Props{\r\n  setFiles : (files:any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}:Props) {\r\n  const dzStyles = {\r\n    border:'dashed 3px #eee',\r\n    borderColor:'#eee',\r\n    borderRadius:'3',\r\n    paddingTop:'30px',\r\n    textAlign:'center' as 'center',\r\n    height:200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor:'green'\r\n  }\r\n\r\n\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file:any) => Object.assign(file,{\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles,...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge'/>\r\n      <Header content='Drop image here'/>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header,Image } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropZone  from './PhotoWidgetDropZone';\r\nimport {Cropper} from 'react-cropper';\r\n\r\n\r\ninterface Props{\r\n    loading:boolean;\r\n    uploadPhoto:(file:Blob) => void;\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading,uploadPhoto}:Props){\r\n    const [files,setFiles] = useState<any>([]);\r\n    const [cropper,setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        return () => {\r\n            files.forEach((files:any)=> URL.revokeObjectURL(files.preview))\r\n        }\r\n    },[files])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropZone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize image'/>\r\n                {files && files.length > 0 &&(\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 - Preview & upload'/>\r\n                {files && files.length > 0 && (\r\n                <>\r\n                    <div className='img-preview' style={{minHeight:200,overflow:'hidden'}} />\r\n                    <Button.Group width={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close'/>\r\n                    </Button.Group>\r\n                </>\r\n\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab,Image, Grid, Button } from 'semantic-ui-react';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\n\r\n\r\ninterface Props{\r\n    profile:Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}:Props){\r\n    const {profileStore:{isCurrentUser,uploadPhoto,uploading,loading,setMainPhoto,deletePhoto}} = useStore();\r\n    const [addPhotoMode,setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    const handlePhotoUpload = (file:Blob) =>{\r\n        uploadPhoto(file).then(()=> setAddPhotoMode(!addPhotoMode));\r\n    }\r\n\r\n    const handleSetMainPhoto = (photo:Photo,e: SyntheticEvent<HTMLButtonElement>) =>{\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    const handleDeletePhoto = (photo:Photo,e:SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n     return(\r\n         <Tab.Pane>\r\n             <Grid>\r\n                 <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos'/>\r\n                    {isCurrentUser &&(\r\n                        <Button floated='right' basic\r\n                          content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                          onClick={()=> setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )} \r\n                 </Grid.Column>\r\n                 <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ):(\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo =>(\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic \r\n                                                color='green' \r\n                                                content='Main' \r\n                                                name={'main'+photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main'+  photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo,e)}\r\n                                            />\r\n                                            <Button\r\n                                               basic\r\n                                               color='red'\r\n                                               icon='trash'\r\n                                               loading={target === photo.id && loading}\r\n                                               onClick={e=> handleDeletePhoto(photo,e)}\r\n                                               name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n\r\n                    )}\r\n                 </Grid.Column>\r\n             </Grid>\r\n         </Tab.Pane>\r\n     )\r\n})","import React, { useState } from 'react'\r\nimport { Button, Form, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Formik } from 'formik';\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\n\r\ninterface Props {\r\n setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileAbout(){\r\n    const [editProfileMode, setEditProfileMode] = useState(false);\r\n\r\n    const {profileStore: {isCurrentUser,profile, updateProfile}} = useStore()\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    return(\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`}/>\r\n                    {isCurrentUser &&(\r\n                        <Button\r\n                        floated='right' \r\n                        basic\r\n                        content={editProfileMode ? 'Cancel': 'Edit Profile'}\r\n                        onClick={() => setEditProfileMode(!editProfileMode)}\r\n                      />\r\n                    )}\r\n                    \r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editProfileMode ? (\r\n                            <Formik\r\n                            initialValues={{displayName: profile?.displayName, bio:\r\n                            profile?.bio}}\r\n                                onSubmit={(values) => \r\n                                    updateProfile(values).then(() => {\r\n                                        setEditMode(false);\r\n                                        })\r\n                                }\r\n                                validationSchema={Yup.object({\r\n                                displayName: Yup.string().required()\r\n                                })}\r\n                            >\r\n                            {({handleSubmit,isSubmitting, isValid, dirty}) => (\r\n                            <Form className='ui form' onSubmit={handleSubmit}>\r\n                                <MyTextInput placeholder='Display Name'\r\n                                name='displayName' />\r\n                                <MyTextArea rows={3} placeholder='Add your bio'\r\n                                name='bio' />\r\n                                <Button \r\n                                    positive\r\n                                    type='submit'\r\n                                    loading={isSubmitting}\r\n                                    content='Update profile'\r\n                                    floated='right'\r\n                                    disabled={!isValid || !dirty}\r\n                                />\r\n                            </Form>\r\n                            )}\r\n                            </Formik>\r\n                    ):(\r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>\r\n                    )}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile,followings,loadingFollowings,activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ProfileAbout  from './ProfileAbout';\r\nimport { useStore } from '../../app/stores/store';\r\nimport  ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\n\r\ninterface Props{\r\n    profile:Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}:Props){\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem : 'About', render: () => <ProfileAbout/>},\r\n        {menuItem : 'Photos', render: () => <ProfilePhotos profile={profile}/>},\r\n        {menuItem : 'Events', render: () => <ProfileActivities/>},\r\n        {menuItem : 'Followers', render: () => <ProfileFollowings/>},\r\n        {menuItem : 'Following', render: () => <ProfileFollowings/>},\r\n    ];\r\n\r\n    return(\r\n        <Tab \r\n          menu={{fluid:true, vertical:true}}\r\n          menuPosition='right'\r\n          panes={panes}\r\n          onTabChange={(e,data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n\r\n})","import React from 'react';\r\nimport {Menu, Container,Button,Image, Dropdown, Segment, Grid, Item, Header, Statistic, Divider, Reveal} from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport  FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile:Profile;\r\n}\r\n\r\n\r\nexport default observer(function ProfileHeader({profile}:Props){\r\n    return(\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || `/assets/user.png`} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                 <Header as='h1' content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage(){\r\n    const {username} = useParams<{username:string}>();\r\n    const {profileStore:{loadingProfile,loadProfile,profile,setActiveTab}} = useStore();\r\n    \r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        return ()=>{\r\n            setActiveTab(0);\r\n        }\r\n    },[loadProfile,username,setActiveTab]);\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile' />\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&(\r\n                    <>\r\n                        <ProfileHeader profile={profile}/>\r\n                        <ProfileContent profile={profile}/>\r\n                    </>\r\n                )}\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {useStore} from '../../stores/store';\r\nimport { Modal } from 'semantic-ui-react';\r\n\r\n\r\nexport default observer(function ModalContainer(){\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})\r\n\r\n","import React, { useEffect } from 'react';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport NavBar from './NavBar';\nimport {Container} from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport Homepage from '../../features/home/Homepage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { ToastContainer } from 'react-toastify';\nimport LoginForm from '../../features/users/LoginForm';\nimport NotFound from '../../features/errors/NotFound';\nimport { useStore } from '../stores/store';\nimport PrivateRoutes from './PrivateRoutes';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport LoadingComponent from './LoadingComponent';\n\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore}  = useStore();\n\n  useEffect(()=>{\n    if(commonStore.token){\n      userStore.getUser().finally(()=>commonStore.setAppLoaded());\n    }else{\n      commonStore.setAppLoaded();\n    }\n  },[commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n  \n  return (\n    <>\n        <ToastContainer position='bottom-right' hideProgressBar/>\n        <ModalContainer/>\n        <Route exact path='/' component={Homepage} />\n        <Route\n           path={'/(.+)'}\n           render = {()=>(\n            <>\n              <NavBar/>\n              <Container style={{marginTop:'7em'}}>\n                <Switch>\n                  <PrivateRoutes exact path='/activities' component={ActivityDashboard} />\n                  <PrivateRoutes path='/activities/:id' component={ActivityDetails} />\n                  <PrivateRoutes key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm} />\n                  <PrivateRoutes path='/profiles/:username' component={ProfilePage} />\n                  <Route component={NotFound}/>\n                </Switch>\n              </Container>\n            </>\n            \n            )}\n        />\n        \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport {store, StoreContext} from './app/stores/store';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    \n  <React.StrictMode>\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop/>\n        <App />\n      </Router>\n    </StoreContext.Provider>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}